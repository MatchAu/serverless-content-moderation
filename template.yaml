AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample content moderation app

Globals:
  Function:
    Runtime: python3.6
    Timeout: 30
    MemorySize: 128

Parameters:
  BucketName:
    Type: String
    Default: YOUR_BUCKET_NAME
  DynamoDbTableName:
    Type: String
    Default: YOUR_DB_TABLE_NAME

Resources:
  ModerateContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/moderateContent.handler
      Role: !GetAtt LamdbaIAMRole.Arn
      Environment:
        Variables:
          CONTENT_MODERATION_ARN: !Ref ModerateContentStepFunction

  CheckFileTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/checkFileType.handler
      Role: !GetAtt LamdbaIAMRole.Arn

  ValidateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/validateImage.handler
      Role: !GetAtt LamdbaIAMRole.Arn

  ValidateVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/validateVideo.handler
      Role: !GetAtt LamdbaIAMRole.Arn
      Timeout: 600
      Environment:
        Variables:
          MODERATION_QUEUE_URL: !Ref VideoModerationQueue
          TOPIC_ARN: !Ref VideoModerationTopic
          ROLE_ARN: !GetAtt RekognitionRole.Arn

  VideoModerationQueue:
    Type: AWS::SQS::Queue

  VideoModerationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !GetAtt VideoModerationQueue.Arn
        Protocol: "sqs"

  VideoModerationQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - sqs:SendMessage
          Resource: "*"
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: VideoModerationTopic
      Queues:
      - Ref: VideoModerationQueue

  SaveResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/saveResult.handler
      Role: !GetAtt LamdbaIAMRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDB

  RekognitionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: rekognition.amazonaws.com
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: SNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "*"
            Resource: !Ref VideoModerationTopic

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"

  ModerateContentStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
      - |-
        {
           "Comment":"Sample content moderation flow",
           "StartAt":"CheckFileType",
           "States":{
              "CheckFileType":{
                 "Type":"Task",
                 "Resource":"${CheckFileTypeFunctionArn}",
                 "Next":"FileType"
              },
              "FileType":{
                 "Type":"Choice",
                 "Choices":[
                    {
                       "Variable":"$.mime",
                       "StringEquals":"image/jpeg",
                       "Next":"IMAGE"
                    },
                    {
                       "Variable":"$.mime",
                       "StringEquals":"image/jpg",
                       "Next":"IMAGE"
                    },
                    {
                       "Variable":"$.mime",
                       "StringEquals":"image/png",
                       "Next":"IMAGE"
                    },
                    {
                       "Variable":"$.mime",
                       "StringEquals":"video/mp4",
                       "Next":"VIDEO"
                    }
                 ],
                 "Default":"OTHER"
              },
              "OTHER":{
                 "Type":"Fail",
                 "Cause":"Invalid file formart"
              },
              "IMAGE":{
                 "Type":"Pass",
                 "Next":"ValidateImage"
              },
             "VIDEO":{
                 "Type":"Pass",
                 "Next":"ValidateVideo"
              },
              "ValidateImage":{
                 "Type":"Task",
                 "Resource":"${ValidateImageFunctionArn}",
                 "Next":"SaveResult"
              },
              "ValidateVideo":{
                 "Type":"Task",
                 "Resource":"${ValidateVideoFunctionArn}",
                 "Next":"SaveResult"
              },
             "SaveResult":{
                 "Type":"Task",
                 "Resource":"${SaveResultFunctionArn}",
                 "End":true
              }
           }
        }

      - {
        CheckFileTypeFunctionArn: !GetAtt CheckFileTypeFunction.Arn,
        ValidateImageFunctionArn: !GetAtt ValidateImageFunction.Arn,
        ValidateVideoFunctionArn: !GetAtt ValidateVideoFunction.Arn,
        SaveResultFunctionArn: !GetAtt SaveResultFunction.Arn
      }
      RoleArn: !GetAtt StatesExecutionRole.Arn

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value: content/
          Function: !GetAtt ModerateContentFunction.Arn

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ModerateContentFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketName}

  LamdbaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:Get*
            Resource:
            - !Sub arn:aws:s3:::${BucketName}/*
      - PolicyName: Rekognition
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rekognition:DetectModerationLabels
            - rekognition:StartContentModeration
            - rekognition:GetContentModeration
            Resource: "*"
      - PolicyName: CloudWatch
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: StepFunction
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: "*"
      - PolicyName: DynamoDb
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt DynamoDB.Arn
      - PolicyName: PassRole
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource: !GetAtt RekognitionRole.Arn
      - PolicyName: SQS
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - SQS:ReceiveMessage
            - SQS:DeleteMessage
            Resource: !GetAtt VideoModerationQueue.Arn

  DynamoDB:
    Type: AWS::Serverless::SimpleTable
    TableName: !Ref DynamoDbTableName
    Properties:
      PrimaryKey:
        Name: ObjectKey
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5