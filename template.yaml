AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample content moderation app

Globals:
  Function:
    Runtime: python3.6
    Timeout: 30
    MemorySize: 128

Parameters:
  BucketName:
    Type: String
    Default: serverless-demo-bucket-1234
  DynamoDbTableName:
    Type: String
    Default: content

Resources:
  ModerateContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/moderateContent.handler
      Role: !GetAtt LamdbaIAMRole.Arn
      Environment:
        Variables:
          CONTENT_MODERATION_ARN: !Ref ModerateContentStepFunction

  CheckFileTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/checkFileType.handler
      Role: !GetAtt LamdbaIAMRole.Arn

  ValidateImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/validateImage.handler
      Role: !GetAtt LamdbaIAMRole.Arn

  ValidateVideoFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/validateVideo.handler
      Role: !GetAtt LamdbaIAMRole.Arn

  SaveResultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/saveResult.handler
      Role: !GetAtt LamdbaIAMRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDB

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - !Sub states.${AWS::Region}.amazonaws.com
          Action: "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeFunction"
            Resource: "*"

  ModerateContentStepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
      - |-
        {
          "Comment": "",
          "StartAt": "HelloWorld",
          "States": {
            "HelloWorld": {
              "Type": "Task",
              "Resource": "${CheckFileTypeFunctionArn}",
              "End": true
            }
          }
        }
      - {
        CheckFileTypeFunctionArn: !GetAtt CheckFileTypeFunction.Arn
      }
      RoleArn: !GetAtt StatesExecutionRole.Arn

  TargetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value: content/
          Function: !GetAtt ModerateContentFunction.Arn

  S3InvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ModerateContentFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketName}

  LamdbaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:Get*
            - s3:Put*
            Resource:
            - !Sub arn:aws:s3:::${BucketName}
            - !Sub arn:aws:s3:::${BucketName}/*
      - PolicyName: Rekognition
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - rekognition:DetectModerationLabels
            Resource: "*"
      - PolicyName: CloudWatch
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: StepFunction
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - states:StartExecution
            Resource: "*"
      - PolicyName: DynamoDb
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            Resource: !GetAtt DynamoDB.Arn

  DynamoDB:
    Type: AWS::Serverless::SimpleTable
    TableName: !Ref DynamoDbTableName
    Properties:
      PrimaryKey:
        Name: ObjectKey
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5